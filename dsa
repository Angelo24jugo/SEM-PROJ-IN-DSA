#include <iostream>
#include <string>
#include <queue>

using namespace std;

// Define a User structure to hold user information
struct User {
    string username;
    int userID;

    User() {}
    User(const string& name, int id) : username(name), userID(id) {}
};

// Define a Node structure for linked list
struct Node {
    User data;
    Node* next;

    Node(const User& userData) : data(userData), next(nullptr) {}
};

// Define a UserDatabase class to manage user data
class UserDatabase {
private:
    Node* head; // Head of the linked list
    queue<User> userQueue; // Queue of users
    User users[100]; // Array of users
    int userCount;

public:
    UserDatabase() : head(nullptr), userCount(0) {}

    // Function to create a new user
    void createUser(const string& name) {
        User newUser(name, userCount + 1);
        users[userCount] = newUser;
        userCount++;

        // Add user to linked list and queue
        Node* newNode = new Node(newUser);
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
        userQueue.push(newUser);

        cout << "User " << newUser.username << " created successfully!" << endl;
    }

    // Function to read user information
    void readUser(int userID) {
        if (userID >= 1 && userID <= userCount) {
            User user = users[userID - 1];
            cout << "User ID: " << user.userID << endl;
            cout << "Username: " << user.username << endl;
        } else {
            cout << "User ID not found!" << endl;
        }
    }

    // Function to update user information
    void updateUser(int userID, const string& newName) {
        if (userID >= 1 && userID <= userCount) {
            users[userID - 1].username = newName;

            // Update linked list
            Node* temp = head;
            while (temp) {
                if (temp->data.userID == userID) {
                    temp->data.username = newName;
                    break;
                }
                temp = temp->next;
            }

            cout << "User information updated successfully!" << endl;
        } else {
            cout << "User ID not found!" << endl;
        }
    }

    // Function to delete a user
    void deleteUser(int userID) {
        if (userID >= 1 && userID <= userCount) {
            // Delete from array
            for (int i = userID - 1; i < userCount - 1; ++i) {
                users[i] = users[i + 1];
            }
            userCount--;

            // Delete from linked list
            Node* temp = head;
            Node* prev = nullptr;
            while (temp) {
                if (temp->data.userID == userID) {
                    if (!prev) {
                        head = temp->next;
                    } else {
                        prev->next = temp->next;
                    }
                    delete temp;
                    cout << "User deleted successfully!" << endl;
                    return;
                }
                prev = temp;
                temp = temp->next;
            }

            cout << "User ID not found!" << endl;
        } else {
            cout << "User ID not found!" << endl;
        }
    }

    // Function to display all users
    void displayUsers() {
        cout << "Users in Array:" << endl;
        for (int i = 0; i < userCount; ++i) {
            cout << "User ID: " << users[i].userID << ", Username: " << users[i].username << endl;
        }

        cout << endl << "Users in Linked List:" << endl;
        Node* temp = head;
        while (temp) {
            cout << "User ID: " << temp->data.userID << ", Username: " << temp->data.username << endl;
            temp = temp->next;
        }

        cout << endl << "Users in Queue:" << endl;
        while (!userQueue.empty()) {
            User user = userQueue.front();
            cout << "User ID: " << user.userID << ", Username: " << user.username << endl;
            userQueue.pop();
        }
    }
};

int main() {
    UserDatabase database;

    // Menu for user operations
    int choice;
    do {
        cout << "\n1. Create User\n2. Read User\n3. Update User\n4. Delete User\n5. Display Users\n6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string name;
                cout << "Enter username: ";
                cin >> name;
                database.createUser(name);
                break;
            }
            case 2: {
                int userID;
                cout << "Enter user ID: ";
                cin >> userID;
                database.readUser(userID);
                break;
            }
            case 3: {
                int userID;
                string newName;
                cout << "Enter user ID: ";
                cin >> userID;
                cout << "Enter new username: ";
                cin >> newName;
                database.updateUser(userID, newName);
                break;
            }
            case 4: {
                int userID;
                cout << "Enter user ID to delete: ";
                cin >> userID;
                database.deleteUser(userID);
                break;
            }
            case 5:
                database.displayUsers();
                break;
            case 6:
                cout << "Exiting program..." << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 6);

    return 0;
}
